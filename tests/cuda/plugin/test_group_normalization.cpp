#include "../utility.h"
#include "../values_test.h"
#include "common/logging.h"
#include "common/plugin.h"
#include "group_normalization_plugin/group_normalization_plugin.h"

#include <iostream>
#include <tuple>

#define LOG_LEVEL ILogger::Severity::kERROR

#define INPUT_NODE  "input"
#define OUTPUT_NODE "output"

using namespace nvinfer1;

UniquePtr<ICudaEngine> createNetworkWithGroupNormalization(RunTimeLogger &logger, int num_groups, int num_channels,
                                                           Dims4 input_dims)
{
    int batchSize = input_dims.d[0];

    // Create a TensorRT engine
    auto builder = makeUnique<IBuilder>(createInferBuilder(logger));
    EXPECT_NE(builder, nullptr);

    // Create network
    auto network = makeUnique<INetworkDefinition>(builder->createNetworkV2(1U));
    EXPECT_NE(network, nullptr);

    // Create input tensor
    ITensor *input = network->addInput(INPUT_NODE, DataType::kFLOAT, input_dims);
    EXPECT_NE(input, nullptr);

    // TODO: create gn Weights

    // Add plugin to the network
    auto gn = nvinfer1::plugin::addGroupNormLayer(network.get(), *input, num_groups, num_channels, 1e-5);
    EXPECT_NE(gn, nullptr);

    auto output = gn->getOutput(0);
    EXPECT_NE(gn, nullptr);

    // Set output name
    output->setName(OUTPUT_NODE);

    // Mark output tensor
    network->markOutput(*output);

    // Build engine
    builder->setMaxBatchSize(batchSize);
    builder->setMaxWorkspaceSize(1 << 30);
    auto engine = makeUnique<ICudaEngine>(builder->buildCudaEngine(*network));
    EXPECT_NE(engine, nullptr);

    // Destroy network and builder
    // using unique_ptr, no need destory manually

    return engine;
}

// clang-format off

std::vector<std::vector<float>> input_data = {
    {
        1., 1., 1., 1., 0., 1., 1., 0., 0., 0., 0., 1., 1., 1., 0., 0.
    },
    {
        1., 1., 1., 1., 0., 1., 1., 0., 0., 0., 0., 1., 1., 1., 0., 0., 
        2., 2., 0., 0., 2., 0., 1., 1., 1., 0., 0., 2., 2., 1., 1., 0., 
        3., 1., 2., 2., 3., 0., 0., 2., 2., 3., 1., 2., 3., 3., 2., 1.
    },
    {
        1., 1., 1., 1., 0., 1., 1., 0., 0., 0., 0., 1., 1., 1., 0., 0., 
        2., 2., 0., 0., 2., 0., 1., 1., 1., 0., 0., 2., 2., 1., 1., 0., 
        3., 1., 2., 2., 3., 0., 0., 2., 2., 3., 1., 2., 3., 3., 2., 1.
    },
    {
        0.84387422,  0.37547702,  -0.99206406, -0.20603140, -0.20786867, -0.87118918, 1.11870074,  -1.28895068, -0.13744405,
        1.05048180,  1.19548523,  -0.02178703, 1.15484929,  -0.03947303, -0.68050402, 1.58700252,  -0.59433615, 0.91509616,
        1.32786167,  -1.69399869, -2.35835338, 0.72684515,  -0.75297421, 1.29682600,  1.03896415,  -1.10807753, 0.65309709,
        -1.16990268, 0.70982718,  1.08366930,  0.81680143,  0.31865793,  0.24858120,  0.26446846,  0.82651758,  -0.94556022,
        -0.69861805, -0.83773184, 1.15827417,  -1.08496702, -1.77108574, -0.57323325, 0.20869491,  -0.69128221, 2.18944359,
        1.62454164,  -0.32228658, 0.50739175,  -1.22718811, -0.39650065, 0.49119896,  -0.40224800, -0.28312895, 0.63294441,
        -1.58948362, 0.38457578,  0.96528256,  -0.97960132, -1.22510576, -0.46788737, -0.28448573, 0.17722097,  0.91297513,
        -1.17173707, -0.87876439, 0.31668070,  1.49287879,  0.69686395,  0.12919235,  -1.22112238, 0.48406112,  0.27476177,
        0.47236910,  0.67288011,  0.73524004,  0.06773771,  1.41248500,  -0.23073530, 0.87594521,  -1.43033624, 1.84399152,
        -0.96265453, -0.99376017, -1.29039466, -1.95031404, -0.71970344, -0.65000141, -0.04637222, 0.36985198,  -1.52617013,
        -0.08947264, -0.87399435, -0.09380997, -0.03876361, -0.08529972, -0.68765152, -0.34533572, -0.91157675, -0.45219770,
        0.35612813,  1.42784739,  0.69072396,  -0.73499197, 1.31277049,  0.70852596,  0.28055876,  -0.94016838, 0.71791637,
        1.61976075,  -0.83212125, 1.02880216,  0.46176711,  -0.75355536, -1.21108758, -0.21684608, 1.98406923,  -0.41247252,
        0.56260061,  -1.41295874, 0.28364968,  -0.63880587, -1.76414144, -1.31984520, 2.26388884,  1.02532399,  0.42584917,
        -1.46944821, -0.64837366, 1.39419365,  0.37460163,  -1.58435106, -0.35583961, -1.14750743, 0.02197950,  1.28117490,
        0.55418158,  0.80587667,  0.95021719,  -0.14318730, -0.43905327, 0.23466071,  -0.08840432, 0.34127796,  0.04155902,
        0.59194154,  1.17883098,  0.83195394,  1.05226731,  -0.08514531, 0.51585698,  -0.38710308, -2.26631427, 0.93686318,
        0.99898845,  0.71105289,  -1.05140197, 0.34691176,  -0.64584547, 1.41247571,  -0.64721155, 0.54392880,  0.14021304,
        0.12672089,  -1.29162836, -0.09374367, -0.28079638, 0.22388235,  -0.20401241, -1.00816739, 1.29176033,  1.79509032,
        1.29921567,  0.66791016,  1.44673276,  0.46652517,  0.55160952,  0.03181616,  0.54714906,  2.23532701,  -0.67652124,
        -0.65513504, 1.47307014,  0.25773191,  -0.98827791, -0.24734953, 0.68494213,  1.12178516,  -2.32715869, -1.00362110,
        0.36369514,  -0.30340341, 0.70033520,  -0.48824093, -0.22442821, -2.72753263, 0.61595523,  -0.36340812, -0.75389779,
        0.00394981,  1.90338326,  -0.83515191, -0.12542365, 0.17613171,  0.43665999,  -1.82308149, -0.98092282, 0.40725902,
        -0.35994226, 0.32282272,  0.55442214,  1.90316129,  0.02390056,  -1.15901959, 0.14055638,  -0.06631004, -1.03970981,
        -0.23646882, 0.50367028,  -0.63778579, 0.50368023,  1.51123405,  -0.36161107, 0.57623881,  0.69143391,  -0.63176346,
        0.11330728,  0.24739549,  -0.88352823, -0.50137419, 1.26176584,  1.02276039,  0.35819867,  -0.25913903, -1.74187195,
        0.21395111,  1.13863027,  0.78637695,  -0.92071301, 0.10185363,  0.99697071,  0.73825431,  1.76185405,  0.82124126,
        0.34392920,  0.27633485,  -0.81238049, 0.55072534,  1.39144635,  1.14145553,  -0.76354671, 1.23156607,  0.28872758,
        -0.32079268, -0.45219228, 0.43172738,  -0.39220989, -1.00504220, -1.16322660, 1.34650576,  -1.60839665, 1.00870800,
        -1.56969178, -0.28142634, 1.21166909,  1.38668561,  -0.25874433, 0.28244936,  -0.95597702, -0.73242563, -1.44490933,
        0.94746727,  1.17054200,  1.20450854,  -0.35753581, -1.90874028, 0.31762579,  1.27393627,  1.46890259,  -0.40181962,
        0.64336121,  1.16818011,  -1.06695688, -0.87252575, 0.09130371,  0.16797642,  0.75452757,  0.62406945,  0.54145277,
        1.68505347,  1.22136843,  1.88883579,  1.29395950,  -1.02594423, 0.41148314,  -0.21338594, 2.08128667,  0.19843732,
        -0.36808035, 0.89705700,  0.40412557,  0.24459417,  -0.87171882, -0.29600492, -0.13313729, 0.22350806,  -0.49514419,
        0.91439599,  1.75947118,  0.70851749,  0.05715429,  -0.88025773, -0.20105928, 0.18623926,  -0.40714228, 0.24724914,
        -0.43406394, 0.78699684,  0.52463180,  1.00062764,  1.46725798,  -1.55066943, -0.38819477, -0.75700611, 0.01904951,
        0.29515883,  0.62816751,  -1.40737903, 0.19551659,  0.44327605,  -0.63950038, 0.48009673,  -0.85608262, 0.71989310,
        -0.60289371, 0.58497483,  0.09854265,  0.60508811,  -1.02551866, 0.60752231,  1.84286141,  0.59360105,  0.99373120,
        0.56406593,  0.52133942,  0.27625093,  0.53293067,  0.06059708,  0.54312867,  1.93907380,  0.07164158,  -1.86642313,
        0.28517166,  1.09858871,  -1.57340169, -1.07313454, 0.31072822,  -1.45549178, 2.11055207,  0.42315197,  -1.44597769
    }
};

std::vector<std::vector<float>> output_data = {
    {
        0.57733488,  0.57733488,  0.57733488,  0.57733488, -1.73200464, 0.57733488, 0.57733488,  -1.73200464, 
        -0.77458012, -0.77458012, -0.77458012, 1.29096687, 1.29096687,  1.29096687, -0.77458012, -0.77458012
    },
    {
        0.57733488,  0.57733488,  0.57733488,  0.57733488,  -1.73200464, 0.57733488,  0.57733488,  -1.73200464,
        -0.77458012, -0.77458012, -0.77458012, 1.29096687,  1.29096687,  1.29096687,  -0.77458012, -0.77458012,
        1.15469301,  1.15469301,  -1.15469277, -1.15469277, 1.15469301,  -1.15469277, 0.00000012,  0.00000012,
        0.16012681,  -1.12088788, -1.12088788, 1.44114149,  1.44114149,  0.16012681,  0.16012681,  -1.12088788,
        1.23759162,  -0.56254160, 0.33752501,  0.33752501,  1.23759162,  -1.46260822, -1.46260822, 0.33752501,
        -0.16012692, 1.12088776,  -1.44114161, -0.16012692, 1.12088776,  1.12088776,  -0.16012692, -1.44114161
    },
    {
        0.00000000,  0.00000000,  0.00000000,  0.00000000,  -0.99997997, 0.99997997,  0.99997997,  -0.99997997,
        -0.57733488, -0.57733488, -0.57733488, 1.73200464,  0.99998009,  0.99998009,  -0.99997997, -0.99997997,
        0.99999511,  0.99999511,  -0.99999499, -0.99999499, 1.41419947,  -1.41419947, 0.00000000,  0.00000000,
        0.30150914,  -0.90452743, -0.90452743, 1.50754571,  1.41419947,  0.00000000,  0.00000000,  -1.41419947,
        1.41419959,  -1.41419947, 0.00000000,  0.00000000,  1.34714675,  -0.96224761, -0.96224761, 0.57734859,
        0.00000000,  1.41419959,  -1.41419947, 0.00000000,  0.90452743,  0.90452743,  -0.30150914, -1.50754571
    },
    {
        0.72039741,  0.26769370,  -1.05402851, -0.29433149, -0.29610720, -0.93720341, 0.98601598,  -1.34096801, -0.22804216,
        0.92008275,  1.06022787,  -0.11626018, 1.02095342,  -0.13335361, -0.75290710, 1.43862748,  -0.66962624, 0.78923315,
        1.18816900,  -1.73244512, -2.37454081, 0.60728937,  -0.82294923, 1.15817320,  0.90895098,  -1.16615498, 0.53601223,
        -1.22590876, 0.59084159,  0.95215827,  0.96994394,  0.44020078,  0.36567873,  0.38257378,  0.98027647,  -0.90421283,
        -0.64160591, -0.78954434, 1.33307791,  -1.05246282, -1.78210545, -0.50826734, 0.32326227,  -0.63380474, 2.42965937,
        1.82892299,  -0.24140194, 0.64090693,  -1.20370579, -0.32032380, 0.62368691,  -0.32643571, -0.19976038, 0.77442396,
        -1.58898342, 0.51030010,  1.12784398,  -0.94041336, -1.20149136, -0.39623892, -0.21167088, 0.26793343,  1.03220832,
        -1.13331568, -0.82898617, 0.41279918,  1.63459134,  0.80771983,  0.21804303,  -1.18461537, 0.58666790,  0.36925530,
        0.57452267,  0.78280628,  0.84758353,  0.15420616,  1.55108118,  -0.15583687, 0.99374306,  -1.40193915, 1.99931467,
        -0.91612816, -0.94843960, -1.25657284, -1.94207346, -0.66375935, -0.59135544, 0.03567288,  0.46803159,  -1.50148797,
        -0.15529992, -1.06294549, -0.16031794, -0.09663253, -0.15047207, -0.84735775, -0.45131847, -1.10642612, -0.57495147,
        0.36023402,  1.60015023,  0.74734175,  -0.90212786, 1.46701300,  0.76793766,  0.27280471,  -1.13950503, 0.77880180,
        1.82218277,  -1.01450074, 1.13847840,  0.48245212,  -0.92360461, -1.45294261, -0.30266351, 2.24366641,  -0.52899182,
        0.59911060,  -1.68649566, 0.27638072,  -0.81560087, -1.99402606, -1.52876937, 2.22403359,  0.92703718,  0.29928112,
        -1.68543017, -0.82562006, 1.31330895,  0.24561588,  -1.80575371, -0.51928520, -1.34830129, -0.12364181, 1.19495833,
        0.43366778,  0.69723707,  0.84838706,  -0.29660064, -0.60642457, 0.09907301,  -0.23923317, 0.21072011,  -0.10313860,
        0.47320914,  1.08778620,  0.72454458,  0.95525163,  -0.23582041, 0.39353520,  -0.64326286, -2.56870627, 0.71327555,
        0.77692926,  0.48190990,  -1.32390475, 0.10881016,  -0.90837085, 1.20058906,  -0.90977049, 0.31067422,  -0.10297374,
        -0.11679783, -1.57004118, -0.34268624, -0.53434086, -0.01724601, -0.45566779, -1.27960658, 1.07690382,  1.59261680,
        1.08454263,  0.43770573,  1.23568892,  0.23136628,  0.31854388,  -0.21403740, 0.31397370,  2.04368401,  -0.93980122,
        -0.48205370, 1.64503241,  0.43033326,  -0.81502140, -0.07448263, 0.85731876,  1.29393220,  -2.15319800, -0.83035654,
        0.53624076,  -0.13050704, 0.87270379,  -0.31524736, -0.05157335, -2.55336142, 0.78836817,  -0.19048019, -0.58076453,
        0.17668457,  2.07511926,  -0.66197592, 0.04737914,  0.34877592,  0.60916722,  -1.64938593, -0.80767018, 0.57978171,
        -0.18701614, 0.49538982,  0.72686744,  2.12874937,  -0.11706634, -1.53071833, 0.02234352,  -0.22487277, -1.38813686,
        -0.42822146, 0.45628381,  -0.90781641, 0.45629567,  1.66037560,  -0.57777303, 0.54300702,  0.68067122,  -0.90061939,
        -0.01022059, 0.15002190,  -1.20149159, -0.74479735, 1.36224794,  1.07662380,  0.28243756,  -0.45531356, -2.22725749,
        0.11005409,  1.21509445,  0.79413319,  -1.24592936, -0.02390830, 1.04580379,  0.67062098,  1.71622133,  0.75539160,
        0.26782048,  0.19877332,  -0.91334212, 0.47906134,  1.33785224,  1.08248830,  -0.86345869, 1.17453563,  0.21143240,
        -0.41118845, -0.54541224, 0.35750574,  -0.48414066, -1.11014473, -1.27172911, 1.29194582,  -1.72646725, 0.94688761,
        -1.68693054, -0.37097603, 1.15421104,  1.33298922,  -0.34780648, 0.20501924,  -1.06002498, -0.83166873, -1.55946612,
        0.50731277,  0.74667883,  0.78312588,  -0.89299583, -2.55748606, -0.16852659, 0.85762405,  1.06682885,  -0.94051373,
        0.18099755,  0.74414444,  -1.65422654, -1.44559598, -0.41137719, -0.32910499, 0.30028248,  0.16029692,  0.07164663,
        1.29876542,  0.80121708,  1.51743007,  0.87910962,  -1.61021864, -0.06781477, -0.73831856, 1.72393584,  -0.29641950,
        -0.90431046, 0.45322096,  -0.07570967, 0.26876935,  -1.20744729, -0.44612095, -0.23074417, 0.24088499,  -0.70946348,
        1.15451777,  2.27204847,  0.88226330,  0.02089814,  -1.21873915, -0.32056448, 0.19160059,  -0.59308940, 0.27228031,
        -0.62869072, 0.98604470,  0.63909215,  1.26855075,  1.88562453,  -2.10529399, -0.56803316, -1.05575073, -0.02949177,
        0.33563626,  0.77600819,  -1.91580629, 0.20386896,  0.53150702,  -0.90036064, 0.30070907,  -1.03295386, 0.54005384,
        -0.78024185, 0.40538964,  -0.08012644, 0.42546508,  -1.20207083, 0.42789468,  1.66090727,  0.41399965,  0.81337619,
        0.38452014,  0.34187409,  0.09724715,  0.35344353,  -0.11800055, 0.36362228,  1.75693858,  -0.10697686, -2.04139161,
        0.10615107,  0.91803622,  -1.74892199, -1.24959707, 0.13165951,  -1.63123417, 1.92809391,  0.24387154,  -1.62173796
    }
};


FREE_KICK_TEST_SUITE_P(GroupNormalizationPlugin, ValueList<int, int, int, int, int, std::vector<float>&, std::vector<float>&>
{
    // batch, group, channel, height, width,        input,          output 
    {      1,     2,       4,      2,     2, input_data[0], output_data[0]},
    {      3,     2,       4,      2,     2, input_data[1], output_data[1]},
    {      3,     4,       4,      2,     2, input_data[2], output_data[2]},
    {      4,     3,       6,      3,     5, input_data[3], output_data[3]},
});

// clang-format on

TEST_P(GroupNormalizationPlugin, run)
{
    int batch   = GetParamValue<0>();
    int group   = GetParamValue<1>();
    int channel = GetParamValue<2>();
    int height  = GetParamValue<3>();
    int width   = GetParamValue<4>();
    int volume  = batch * channel * height * width;

    std::vector<float> _input_data  = GetParamValue<5>();
    std::vector<float> _output_data = GetParamValue<6>();

    std::vector<float> _output(volume);

    // create a logger
    auto logger = RunTimeLogger("GN run", LOG_LEVEL);

    auto engine = createNetworkWithGroupNormalization(logger, group, channel, Dims4{batch, channel, height, width});
    EXPECT_NE(engine, nullptr);

    // Create execution context
    auto context = makeUnique<IExecutionContext>(engine->createExecutionContext());
    EXPECT_NE(context, nullptr);

    auto  input_buf  = std::make_shared<CudaBuffer<float>>(volume);
    auto  output_buf = std::make_shared<CudaBuffer<float>>(volume);
    void *buffers[2] = {input_buf->mPtr, output_buf->mPtr};

    size_t input_size = volume * sizeof(float);

    // Create CUDA stream
    cudaStream_t stream;
    EXPECT_EQ(cudaSuccess, cudaStreamCreate(&stream));

    // copy input buffer to device
    EXPECT_EQ(cudaSuccess, cudaMemcpyAsync(buffers[0], _input_data.data(), input_size, cudaMemcpyHostToDevice, stream));

    // Execute inference
    EXPECT_TRUE(context->enqueue(batch, buffers, stream, nullptr));

    // copy output to buffer
    EXPECT_EQ(cudaSuccess, cudaMemcpyAsync(_output.data(), buffers[1], input_size, cudaMemcpyDeviceToHost, stream));

    // Synchronize inference
    EXPECT_EQ(cudaSuccess, cudaStreamSynchronize(stream));

    EXPECT_EQ(cudaSuccess, cudaStreamDestroy(stream));

    EXPECT_TRUE(buffersEqual(_output, _output_data, volume, 1e-5));
}
